name: Build and test

on:
  workflow_call:
    inputs:
      php-version:
        required: true
        type: string
      default:
        required: true
        type: boolean
        default: false
      connection:
        required: true
        type: string
      coverage:
        required: true
        type: boolean
      coverage-conection:
        required: true
        type: string
        default: sqlite
      testsuite:
        required: true
        type: string
      database_name:
        required: true
        type: string
        default: monica
      database_secret:
        required: true
        type: string
        default: secret
      sonar_project:
        required: true
        type: string
        default: monica

concurrency:
  group: Build ${{ github.ref }}
  cancel-in-progress: true
        
jobs:
  #############
  # Run tests
  #############
  tests:
    runs-on: ubuntu-latest
    name: Testsuite ${{ inputs.testsuite }} with PHP ${{ inputs.php-version }} + ${{ inputs.connection }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup PHP ${{ inputs.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ inputs.php-version }}
          extensions: mbstring, dom, fileinfo, ${{ inputs.connection }}
          coverage: ${{ inputs.coverage && 'pcov' || 'none' }}
          ini-values: ${{ inputs.coverage && 'pcov.directory=., pcov.exclude="~vendor~"' || '' }}

      - name: Check PHP Version
        run: php -v
      - name: Check Composer Version
        run: composer -V
      - name: Check PHP Extensions
        run: php -m
      - name: Setup problem matchers for PHP
        run: echo "::add-matcher::${{ runner.tool_cache }}/php.json"

    # Composer
      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      - name: Cache composer files
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ inputs.php-version }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-${{ inputs.php-version }}-${{ hashFiles('**/composer.lock') }}
            ${{ runner.os }}-composer-${{ inputs.php-version }}
            ${{ runner.os }}-composer-

      - name: Install composer dependencies
        run: composer install --no-progress --no-interaction --prefer-dist --optimize-autoloader

    # Prepare
      - name: Prepare environment
        run: |
          cp tests/.env.ci.${{ inputs.connection }} .env
          mkdir -p public/build/assets
          {\
            echo "{"; \
            for f in app.js app.css; do \
              [[ $first == 1 ]] && echo -n "," || first=1; \
              k=${f##*.}/$f; \
              echo "\"resources/$k\": {\"file\": \"assets/$f\", \"src\": \"resources/$k\"}"; \
              echo '' > public/build/assets/$f; \
            done; \
            echo "}"; \
          } | tee public/build/manifest.json
      - name: Create sqlite database
        if: inputs.connection == 'sqlite'
        run: touch database/database.sqlite
      - name: Create mysql database
        if: inputs.connection == 'mysql'
        run: |
          sudo systemctl start mysql.service
          mysql --protocol=tcp -u root -proot -e "CREATE DATABASE IF NOT EXISTS ${{ inputs.database_name }} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
      - name: Create pgsql database
        if: inputs.connection == 'pgsql'
        run: |
          sudo systemctl start postgresql.service
          sudo -u postgres psql --command="CREATE USER ${{ inputs.database_name }} PASSWORD 'secret'" --command="\du"
          sudo -u postgres createdb --owner=${{ inputs.database_name }} ${{ inputs.database_name }}
          PGPASSWORD=${{ inputs.database_secret }} psql --username=${{ inputs.database_name }} --host=localhost --list ${{ inputs.database_name }}

      - name: Generate key
        run: php artisan key:generate

      - name: Run migrations
        run: php artisan migrate --no-interaction -vvv
      - name: Run seeds
        run: php artisan db:seed --no-interaction -vvv
      - name: Cache route
        run: php artisan route:cache

    # Test
      - name: Setup problem matchers for PHPUnit
        run: echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"
      - name: Run tests suite with coverage
        if: inputs.coverage
        run: vendor/bin/phpunit -c phpunit.xml --testsuite ${{ inputs.testsuite }} --log-junit ./results/${{ inputs.connection }}/junit/results${{ inputs.testsuite }}.xml --coverage-clover ./results/${{ inputs.connection }}/coverage/coverage${{ inputs.testsuite }}.xml
        env:
          DB_CONNECTION: ${{ inputs.connection }}
      - name: Run tests
        if: ! inputs.coverage
        run: vendor/bin/phpunit -c phpunit.xml --testsuite ${{ inputs.testsuite }} --log-junit ./results/${{ inputs.connection }}/junit/results${{ inputs.testsuite }}.xml
        env:
          DB_CONNECTION: ${{ inputs.connection }}

      - name: Fix results files
        run: sed -i -e "s%$GITHUB_WORKSPACE/%%g" **/*.xml
        working-directory: results/${{ inputs.connection }}
        if: success() || failure()

      - name: Store results
        if: inputs.coverage && (success() || failure())
        uses: actions/upload-artifact@v4
        with:
          name: results-${{ inputs.php-version }}-${{ inputs.connection }}-${{ inputs.testsuite }}
          path: results


  ###########################
  # Reporting to sonarcloud
  ###########################
  sonarcloud:
    needs: tests
    runs-on: ubuntu-latest
    name: Sonarcloud
    if: success() || failure()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Download results
        uses: actions/download-artifact@v4
        with:
          pattern: results-*
          path: results
          merge-multiple: true

      - name: Merge junit files
        run: |
          yarn dlx junit-merge --recursive --dir results/${{ inputs.coverage-conection }}/junit --out results/results.xml

      - name: Set version parameter
        id: version
        run: |
          version=$(git tag --points-at HEAD)
          test -z "$version" && version="main"
          echo "value=$version" >> $GITHUB_OUTPUT

      - name: Set coverage list
        id: coverage
        run: |
          SONAR_COVERAGE=$(ls -m --format=comma results/${{ inputs.coverage-conection }}/coverage/coverage*.xml | sed -e ':a;N;$!ba;s/\n//g; s/ //g;')
          echo "list=$SONAR_COVERAGE" >> $GITHUB_OUTPUT

      - name: SonarCloud Scan
        if: env.SONAR_TOKEN != ''
        uses: SonarSource/sonarcloud-github-action@v2.1.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: |
            -Dsonar.projectKey=${{ inputs.sonar_project }}
            -Dsonar.organization=monicahq
            -Dsonar.sources=app,bootstrap,config,database,public,resources,routes
            -Dsonar.exclusions=bootstrap/cache/*,public/vendor/**,resources/lang/**
            -Dsonar.tests=tests
            -Dsonar.coverage.exclusions=routes/*.php,config/**/*.php,bootstrap/**,resources/**/*.php,database/**/*.php,public/*.php,resources/**/*.vue,resources/**/*.js
            -Dsonar.cpd.exclusions=routes/*.php,config/*.php,bootstrap/**,resources/**/*.php,database/**/*.php
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.projectVersion=${{ steps.version.outputs.value }}
            -Dsonar.php.tests.reportPath=./results/results.xml
            -Dsonar.php.coverage.reportPaths=${{ steps.coverage.outputs.list }}


  ###########################
  # JUnit Test Report
  ###########################
  reporting:
    needs: tests
    runs-on: ubuntu-latest
    name: Reporting
    if: success() || failure()

    steps:
      - name: Download results
        uses: actions/download-artifact@v4
        with:
          pattern: results-*
          path: results
          merge-multiple: true

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: results/${{ inputs.coverage-conection }}/junit/*.xml
